[
    {
        "id": "76e4921e87a05a32",
        "type": "tab",
        "label": "DataFlow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "aabb6b52ef1c11bc",
        "type": "tab",
        "label": "Thresholds",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "mqttBroker",
        "type": "mqtt-broker",
        "name": "MQTT Broker",
        "broker": "broker",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "7e2934393ac03b0c",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": 8086,
        "protocol": "http",
        "database": "database",
        "name": "univaq",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://influxdb:8086",
        "timeout": 10,
        "rejectUnauthorized": true
    },
    {
        "id": "mqttInNode",
        "type": "mqtt in",
        "z": "76e4921e87a05a32",
        "name": "MQTT Input",
        "topic": "SmartHome/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "mqttBroker",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 90,
        "y": 140,
        "wires": [
            [
                "c2130bd3f3cf3f1b"
            ]
        ]
    },
    {
        "id": "ddb1cba5cc2fcff1",
        "type": "http request",
        "z": "76e4921e87a05a32",
        "name": "tgbot alert",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "",
                "valueType": "other",
                "valueValue": ""
            }
        ],
        "x": 700,
        "y": 260,
        "wires": [
            [
                "51b437a80f1c641d"
            ]
        ]
    },
    {
        "id": "26ddd0e43536d9b4",
        "type": "inject",
        "z": "76e4921e87a05a32",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "83e7dbbe33056d07"
            ]
        ]
    },
    {
        "id": "34d528bb595484f9",
        "type": "debug",
        "z": "76e4921e87a05a32",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 40,
        "wires": []
    },
    {
        "id": "83e7dbbe33056d07",
        "type": "function",
        "z": "76e4921e87a05a32",
        "name": "function 2",
        "func": "msg.payload = env.get(\"TG_CHAT_ID\") + \" \" + env.get(\"TGBOT_TOKEN\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 60,
        "wires": [
            [
                "34d528bb595484f9"
            ]
        ]
    },
    {
        "id": "369060609f013492",
        "type": "function",
        "z": "76e4921e87a05a32",
        "name": "send alert",
        "func": "var val = msg.payload.value;\nvar place= msg.payload.room;\nvar sens = msg.payload.sensorType;\nvar chatID = env.get(\"TG_CHAT_ID\");\nvar token = env.get(\"TGBOT_TOKEN\");\nmsg.url = \"https://api.telegram.org/bo\" + token + \"/sendMessage\";\n\n\nmsg.headers = {\n    \"Content-Type\": \"application/json\"\n};\n\nmsg.payload = JSON.stringify({\n    chat_id: chatID,\n    text:\n        \"Domain: SmartHome\\n\" +\n        \"Location: \" + place + \"\\n\" +\n        \"Sensor: \" + sens + \"\\n\" +\n        \"Condition: Exceeded max value\"\n});\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 220,
        "wires": [
            [
                "ddb1cba5cc2fcff1",
                "63e20e0b668699f8"
            ]
        ]
    },
    {
        "id": "63e20e0b668699f8",
        "type": "debug",
        "z": "76e4921e87a05a32",
        "name": "bot",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 220,
        "wires": []
    },
    {
        "id": "51b437a80f1c641d",
        "type": "debug",
        "z": "76e4921e87a05a32",
        "name": "response",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 260,
        "wires": []
    },
    {
        "id": "c2130bd3f3cf3f1b",
        "type": "function",
        "z": "76e4921e87a05a32",
        "name": "parseData",
        "func": "var topic_split = msg.topic.split(\"/\");\n// topic= {Network,Room,SensType}\n\n\nlet val = parseInt(msg.payload);\n\nmsg.payload = {\n    room: topic_split[1],\n    sensorType: topic_split[2],\n    value: val  \n};\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 140,
        "wires": [
            [
                "2a6dd825a1c71e80",
                "637b074bcd779372",
                "6bc9167dff74837e"
            ]
        ]
    },
    {
        "id": "2a6dd825a1c71e80",
        "type": "function",
        "z": "76e4921e87a05a32",
        "name": "into influx",
        "func": "// supponiamo che msg.topic_split sia un array giÃ  creato da uno split sul topic\nvar extractedMeasure = msg.payload.room + \"_\" +msg.payload.sensorType ; \n\n// prendi il valore\nvar val = msg.payload.value; \n\n// prepara il messaggio per Influx\nmsg.measurement = extractedMeasure;        // measurement dinamico\nmsg.fields = { value: val };               // campo che vuoi salvare\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 140,
        "wires": [
            [
                "27b59ebb365e6adb"
            ]
        ]
    },
    {
        "id": "27b59ebb365e6adb",
        "type": "influxdb out",
        "z": "76e4921e87a05a32",
        "influxdb": "7e2934393ac03b0c",
        "name": "influx all",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "univaq",
        "bucket": "smart_home_iot",
        "x": 620,
        "y": 140,
        "wires": []
    },
    {
        "id": "637b074bcd779372",
        "type": "debug",
        "z": "76e4921e87a05a32",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 100,
        "wires": []
    },
    {
        "id": "6bc9167dff74837e",
        "type": "function",
        "z": "76e4921e87a05a32",
        "name": "thresholds check",
        "func": "var value = msg.payload.value;\nvar room = msg.payload.room;\nvar sensorType = msg.payload.sensorType;\nvar t_globalName = room + \"_\" + sensorType;\nif(value > global.get(t_globalName)){\n    return msg;\n}\n    \n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 220,
        "wires": [
            [
                "369060609f013492",
                "dcbb368b732d51ec"
            ]
        ]
    },
    {
        "id": "dcbb368b732d51ec",
        "type": "debug",
        "z": "76e4921e87a05a32",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 300,
        "wires": []
    },
    {
        "id": "4e032a53e645f15d",
        "type": "mqtt in",
        "z": "aabb6b52ef1c11bc",
        "name": "Get Threshold",
        "topic": "SmartHome/thresholds/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "mqttBroker",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 260,
        "wires": [
            [
                "d8667e3e150d3bcd"
            ]
        ]
    },
    {
        "id": "d8667e3e150d3bcd",
        "type": "function",
        "z": "aabb6b52ef1c11bc",
        "name": "set threshold",
        "func": "var threshold_value = msg.payload\nvar topic = msg.topic;\n\n// e.g. arr = [SmartHome,thresholds,livingroom,light]\nvar arr = topic.split(\"/\");\n\n\n// e.g. t_global= \"livingroom_light\"\nvar t_global = arr[2]+ \"_\" +arr[3]; \nglobal.set(t_global,threshold_value);\n\nmsg.payload = \"threshold [\"+ t_global +\"] set to:\" + threshold_value;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 260,
        "wires": [
            [
                "cbb5b3db72e75f8d"
            ]
        ]
    },
    {
        "id": "cbb5b3db72e75f8d",
        "type": "debug",
        "z": "aabb6b52ef1c11bc",
        "name": "Debug threshold",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 260,
        "wires": []
    }
]